package Interfaces;

import FASE1.Curso;
import FASE1.Escuela;
import FASE1.dataBase;
import Fase03.HashA;
import Fase2.ItemNotFound;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dvpy4
 */
public class notas extends javax.swing.JFrame {

    /**
     * Creates new form uno
     */

    public notas() {
        initComponents();
        this.getContentPane().setBackground(new Color(204, 237, 171));
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btMatricula = new javax.swing.JButton();
        btNotas = new javax.swing.JButton();
        bt_horario = new javax.swing.JButton();
        bt_personal = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        boxSemestre = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtalumno = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        matricula = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 51, 255));

        btMatricula.setText("Consolidado de matricula");
        btMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMatriculaActionPerformed(evt);
            }
        });

        btNotas.setText("Consolidado de Notas");
        btNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNotasActionPerformed(evt);
            }
        });

        bt_horario.setText("Horario");
        bt_horario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_horarioActionPerformed(evt);
            }
        });

        bt_personal.setText("Informacion Personal");
        bt_personal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_personalActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(194, 207, 192));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Escuela Profesional");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione ...", "Ing.Sistemas", " ", " " }));

        jLabel2.setText("Semestre");

        boxSemestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "semestre 1", "semestre 2", "semestre 3", "semestre 4", "semestre 5", "semestre 6", "semestre 7", "semestre 8", "semestre 9", "semestre 10", " " }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(boxSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtalumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Cod. Alumno", null, "Apellidos y nombres", null, null, null},
                {"Tipo de matricula", null, "Semestre Academico", null, "Cat", null},
                {"Total de creditos", null, "Credito Base", null, "Semes.Bas", null}
            },
            new String [] {
                "Cod. Escuela profesional", "", "Codigo", "", "Escuela Profesional", ""
            }
        ));
        txtalumno.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(txtalumno);

        matricula.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Sec", "Grupo", "Curso", "Cred.Teo", "Cred.Pract", "Cred.Total", "Teoria", "Practica", "Promedio"
            }
        ));
        jScrollPane2.setViewportView(matricula);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(238, 238, 238))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(182, 182, 182))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btMatricula, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btNotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_horario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_personal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btNotas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btMatricula)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_horario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_personal)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMatriculaActionPerformed
        ir_matricula();
    }//GEN-LAST:event_btMatriculaActionPerformed

    private void bt_personalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_personalActionPerformed
        ir_personañ();
    }//GEN-LAST:event_bt_personalActionPerformed

    private void btNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNotasActionPerformed
        ir_notas();
    }//GEN-LAST:event_btNotasActionPerformed

    private void bt_horarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_horarioActionPerformed
        ir_horario();
    }//GEN-LAST:event_bt_horarioActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            mostrar();
        } catch (ItemNotFound ex) {
            Logger.getLogger(notas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxSemestre;
    private javax.swing.JButton btMatricula;
    private javax.swing.JButton btNotas;
    private javax.swing.JButton bt_horario;
    private javax.swing.JButton bt_personal;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable matricula;
    private javax.swing.JTable txtalumno;
    // End of variables declaration//GEN-END:variables

    private void ir_matricula() {
        matricula a = new matricula();
        a.setVisible(true);
        this.setVisible(false);

    }

    private void ir_notas() {
        notas a = new notas();
        a.setVisible(true);
        this.setVisible(false);

    }

    private void ir_horario() {
        horario a = new horario();
        a.setVisible(true);
        this.setVisible(false);
    }

    private void ir_personañ() {
        personal a = new personal();
        a.setVisible(true);
        this.setVisible(false);
    }

    dataBase db=new dataBase();
    private void mostrar() throws ItemNotFound {
        

        if (boxSemestre.getSelectedItem().equals("semestre 1")) {
            limpiar_tabla();
            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_1().length; i++) {
                o[0] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 2")) {
            limpiar_tabla();
            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_2().length; i++) {
                o[0] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 3")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_3().length; i++) {
                o[0] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 4")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_4().length; i++) {
                o[0] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 5")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_5().length; i++) {
                o[0] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 6")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_6().length; i++) {
                o[0] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 7")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_7().length; i++) {
                o[0] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 8")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_8().length; i++) {
                o[0] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 9")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_9().length; i++) {
                o[0] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 10")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) matricula.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_10().length; i++) {
                o[0] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getGrupo();
                o[2] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getSEc();
                o[3] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNombre();
                o[4] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getCosto_credito_teo();
                o[5] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getCosto_credito_prac();
                o[6] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getTotal_credito();
                o[7] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNota_teoria();
                o[8] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNota_practica();
                o[9] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getPromedio();
                modelo.addRow(o);
                matricula.setModel(modelo);
            }

        }

    }

    private void limpiar_tabla() {
        DefaultTableModel temp = (DefaultTableModel) matricula.getModel();
        int filas = matricula.getRowCount();

        for (int a = 0; filas > a; a++) {
            temp.removeRow(0);
        }
    }
}
