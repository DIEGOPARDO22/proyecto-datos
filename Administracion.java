/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import FASE1.Curso;
import FASE1.dataBase;
import Fase2.ItemNotFound;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dvpy4
 */
public class Administracion extends javax.swing.JFrame {

    /**
     * Creates new form Administracion
     */
    public Administracion() {
        initComponents();
        this.getContentPane().setBackground(new Color(204, 237, 171));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        boxSemestre = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Regresar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        administrando = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("DNI");

        jLabel2.setText("Semestre");

        boxSemestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "semestre 1", "semestre 2", "semestre 3", "semestre 4", "semestre 5", "semestre 6", "semestre 7", "semestre 8", "semestre 9", "semestre 10" }));

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Actualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Regresar.setText("regresar");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDNI))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxSemestre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(Regresar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(boxSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(Regresar)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        administrando.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod. Curso", "Nombre", "Nota Teoria", "Nota Practica", "Aula", "Seccion", "Grupo", "Horario"
            }
        ));
        jScrollPane1.setViewportView(administrando);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            mostrar();
        } catch (ItemNotFound ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            editar();
        } catch (ItemNotFound ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
        regrear();
    }//GEN-LAST:event_RegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administracion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Regresar;
    private javax.swing.JTable administrando;
    private javax.swing.JComboBox<String> boxSemestre;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtDNI;
    // End of variables declaration//GEN-END:variables
    dataBase db = new dataBase();

    private void mostrar() throws ItemNotFound {

        if (boxSemestre.getSelectedItem().equals("semestre 1")) {
            limpiar_tabla();
            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_1().length; i++) {
                o[0] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getAula();
                o[5] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getHorario();

                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 2")) {
            limpiar_tabla();
            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_2().length; i++) {
                o[0] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getAula();
                o[5] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 3")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_3().length; i++) {
                o[0] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getAula();
                o[5] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 4")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_4().length; i++) {
                o[0] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getAula();
                o[5] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 5")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_5().length; i++) {
                o[0] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getAula();
                o[5] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 6")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_6().length; i++) {
                o[0] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getAula();
                o[5] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 7")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_7().length; i++) {
                o[0] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getAula();
                o[5] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 8")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_8().length; i++) {
                o[0] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getAula();
                o[5] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 9")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_9().length; i++) {
                o[0] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getAula();
                o[5] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 10")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_10().length; i++) {
                o[0] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getId_curso();
                o[1] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNombre();
                o[2] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNota_teoria();
                o[3] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNota_practica();
                o[4] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getAula();
                o[5] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getSEc();
                o[6] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getGrupo();
                o[7] = db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getHorario();
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        }

    }

    private void limpiar_tabla() {
        DefaultTableModel temp = (DefaultTableModel) administrando.getModel();
        int filas = administrando.getRowCount();

        for (int a = 0; filas > a; a++) {
            temp.removeRow(0);
        }
    }

    private void editar() throws ItemNotFound {
        if (boxSemestre.getSelectedItem().equals("semestre 1")) {
            limpiar_tabla();
            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_1().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre1().search(db.getSemestre_1()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 2")) {
            limpiar_tabla();
            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_2().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre2().search(db.getSemestre_2()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 3")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_3().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre3().search(db.getSemestre_3()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 4")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_4().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre4().search(db.getSemestre_4()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 5")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_5().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre5().search(db.getSemestre_5()[i].getId_curso()).setHorario(tempo.getHorario());
                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 6")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_6().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre6().search(db.getSemestre_6()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 7")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_7().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre7().search(db.getSemestre_7()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 8")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_8().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre8().search(db.getSemestre_8()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 9")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_9().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre9().search(db.getSemestre_9()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        } else if (boxSemestre.getSelectedItem().equals("semestre 10")) {
            limpiar_tabla();

            DefaultTableModel modelo = (DefaultTableModel) administrando.getModel();
            Object[] o = new Object[11];
            for (int i = 0; i < db.getSemestre_10().length; i++) {
                int fila = administrando.getSelectedRow();
                int cod_curso = Integer.parseInt(administrando.getValueAt(fila, 0).toString());
                String Nombre = administrando.getValueAt(fila, 1).toString();
                double nota_teoria = Double.parseDouble(administrando.getValueAt(fila, 2).toString());
                double nota_practica = Double.parseDouble(administrando.getValueAt(fila, 3).toString());
                String aula = administrando.getValueAt(fila, 4).toString();
                char seccion = administrando.getValueAt(fila, 5).toString().charAt(0);
                String grupo = administrando.getValueAt(fila, 6).toString();
                String horario = administrando.getValueAt(fila, 7).toString();
                Curso tempo = new Curso(cod_curso, seccion, Nombre, nota_practica, nota_teoria, aula, horario, aula);
                if (db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).getNombre().equals(tempo.getNombre())) {
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setId_curso(tempo.getId_curso());
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setNombre(tempo.getNombre());
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setNota_teoria(tempo.getNota_teoria());
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setNota_practica(tempo.getNota_practica());
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setAula(tempo.getAula());
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setGrupo(tempo.getGrupo());
                    db.getSemestre10().search(db.getSemestre_10()[i].getId_curso()).setHorario(tempo.getHorario());

                }
                modelo.addRow(o);
                administrando.setModel(modelo);
            }

        }
    }

    private void regrear() {
        Login a=new Login();
        a.setVisible(true);
        this.setVisible(false);
    }
}
